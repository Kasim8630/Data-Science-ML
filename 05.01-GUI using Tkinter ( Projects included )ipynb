{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GUI using Tkinter\n",
    "\n",
    "### Tkinter is the standard GUI library for Python. Python when combined with Tkinter provides a fast and easy way to create GUI applications. Tkinter provides a powerful object-oriented interface to the Tk GUI toolkit. Tkinter is included with standard Linux, Microsoft Windows and Mac OS X installs of Python. The name Tkinter comes from Tk interface."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Let's Start...!\n",
    "## Importing Required Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simple Intro type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "root = Tk()\n",
    "\n",
    "myLabel = Label(root,text = 'Kasim')\n",
    "myLabel.pack()\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Grid System"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "root = Tk()\n",
    "\n",
    "myLabel1 = Label(root,text = 'Hello World')\n",
    "myLabel2 = Label(root,text = 'My Name Is Kasim')\n",
    "\n",
    "myLabel1.grid(row = 0 , column = 0)\n",
    "myLabel2.grid(row = 1 , column = 0)\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Some Tricks\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "myLabel1 = Label(root,text = 'Hello World')\n",
    "myLabel2 = Label(root,text = 'My Name Is Kasim')\n",
    "myLabel3 = Label(root,text = '                 ')\n",
    "\n",
    "myLabel1.grid(row = 0 , column = 0)\n",
    "myLabel2.grid(row = 1 , column = 5)\n",
    "myLabel3.grid(row = 1 , column = 2)\n",
    "\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reducing line Of code since python is OOP\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "myLabel1 = Label(root,text = 'Hello World').grid(row = 0 , column = 0)\n",
    "myLabel2 = Label(root,text = 'My Name Is Kasim').grid(row = 1 , column = 0)\n",
    "\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating Buttons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Simple Button\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "myButton = Button(root, text=\"Click Me!\")\n",
    "myButton.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Resize buton x axis\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "myButton = Button(root, text=\"Click Me!\",padx=50)\n",
    "myButton.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Resize buton y axis\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "myButton = Button(root, text=\"Click Me!\",pady=50)\n",
    "myButton.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Resize buton x axis & y axis\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "myButton = Button(root, text=\"Click Me!\",padx=50,pady=50)\n",
    "myButton.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Programming button to do something\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "def myClick():\n",
    "    myLabel = Label(root, text=\"Look! I clicked a Button!!\")\n",
    "    myLabel.pack()\n",
    "\n",
    "myButton = Button(root, text=\"Click Me!\", command=myClick)\n",
    "myButton.pack()\n",
    "\n",
    "\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Coloring Buttons\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "def myClick():\n",
    "    myLabel = Label(root, text=\"Look! I clicked a Button!!\")\n",
    "    myLabel.pack()\n",
    "\n",
    "myButton = Button(root, text=\"Click Me!\", command=myClick, fg = 'red',bg = 'blue') # Note we can also use hex color codes\n",
    "myButton.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Input Fields"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "root = Tk()\n",
    "\n",
    "e = Entry(root)   # Note\n",
    "e.pack()\n",
    "\n",
    "def myClick():\n",
    "    myLabel = Label(root, text=\"Look! I clicked a Button!!\")\n",
    "    myLabel.pack()\n",
    "\n",
    "myButton = Button(root, text=\"Click Me!\", command=myClick)\n",
    "myButton.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Resize Input Field\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "e = Entry(root,width = 50)   # Note\n",
    "e.pack()\n",
    "\n",
    "def myClick():\n",
    "    myLabel = Label(root, text=\"Look! I clicked a Button!!\")\n",
    "    myLabel.pack()\n",
    "\n",
    "myButton = Button(root, text=\"Click Me!\", command=myClick)\n",
    "myButton.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Color Input Field\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "e = Entry(root,width = 50 , fg = 'red',bg = 'blue')   # Note\n",
    "e.pack()\n",
    "\n",
    "def myClick():\n",
    "    myLabel = Label(root, text=\"Look! I clicked a Button!!\")\n",
    "    myLabel.pack()\n",
    "\n",
    "myButton = Button(root, text=\"Click Me!\", command=myClick)\n",
    "myButton.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Borderwidth Input Field\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "e = Entry(root,width = 50 , borderwidth = 5)   # Note\n",
    "e.pack()\n",
    "\n",
    "def myClick():\n",
    "    myLabel = Label(root, text=\"Look! I clicked a Button!!\")\n",
    "    myLabel.pack()\n",
    "\n",
    "myButton = Button(root, text=\"Click Me!\", command=myClick)\n",
    "myButton.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Programming Input Field to do something\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "e = Entry(root,width = 50 , borderwidth = 5)   # Note\n",
    "e.pack()\n",
    "e.insert(0, 'Enter Your Name : ')              # Note \n",
    "\n",
    "def myClick():\n",
    "    hello = \"Hello \" + e.get()              # Note\n",
    "    myLabel = Label(root, text = hello)   # Note\n",
    "    myLabel.pack()\n",
    "\n",
    "myButton = Button(root, text=\"Click Me!\", command=myClick)\n",
    "myButton.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project - 01\n",
    "\n",
    "## Building A Simple Calculator App"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "\n",
    "root = Tk()\n",
    "root.title(\"Simple Calculator\")\n",
    "\n",
    "e = Entry(root, width=35, borderwidth=5)\n",
    "e.grid(row=0, column=0, columnspan=3, padx=10, pady=10)\n",
    "\n",
    "#e.insert(0, \"\")\n",
    "\n",
    "def button_click(number):\n",
    "    #e.delete(0, END)\n",
    "    current = e.get()\n",
    "    e.delete(0, END)\n",
    "    e.insert(0, str(current) + str(number))\n",
    "\n",
    "def button_clear():\n",
    "    e.delete(0, END)\n",
    "\n",
    "def button_add():\n",
    "    first_number = e.get()\n",
    "    global f_num\n",
    "    global math\n",
    "    math = \"addition\"\n",
    "    f_num = int(first_number)\n",
    "    e.delete(0, END)\n",
    "\n",
    "def button_equal():\n",
    "    second_number = e.get()\n",
    "    e.delete(0, END)\n",
    "    \n",
    "    if math == \"addition\":\n",
    "        e.insert(0, f_num + int(second_number))\n",
    "\n",
    "    elif math == \"subtraction\":\n",
    "        e.insert(0, f_num - int(second_number))\n",
    "\n",
    "    elif math == \"multiplication\":\n",
    "        e.insert(0, f_num * int(second_number))\n",
    "\n",
    "    elif math == \"division\":\n",
    "        e.insert(0, f_num / int(second_number))\n",
    "\n",
    "    \n",
    "\n",
    "def button_subtract():\n",
    "    first_number = e.get()\n",
    "    global f_num\n",
    "    global math\n",
    "    math = \"subtraction\"\n",
    "    f_num = int(first_number)\n",
    "    e.delete(0, END)\n",
    "\n",
    "def button_multiply():\n",
    "    first_number = e.get()\n",
    "    global f_num\n",
    "    global math\n",
    "    math = \"multiplication\"\n",
    "    f_num = int(first_number)\n",
    "    e.delete(0, END)\n",
    "\n",
    "def button_divide():\n",
    "    first_number = e.get()\n",
    "    global f_num\n",
    "    global math\n",
    "    math = \"division\"\n",
    "    f_num = int(first_number)\n",
    "    e.delete(0, END)\n",
    "\n",
    "\n",
    "# Define Buttons\n",
    "\n",
    "button_1 = Button(root, text=\"1\", padx=40, pady=20, command=lambda: button_click(1))\n",
    "button_2 = Button(root, text=\"2\", padx=40, pady=20, command=lambda: button_click(2))\n",
    "button_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))\n",
    "button_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\n",
    "button_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\n",
    "button_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\n",
    "button_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\n",
    "button_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\n",
    "button_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\n",
    "button_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\n",
    "button_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\n",
    "button_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\n",
    "button_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\n",
    "\n",
    "button_subtract = Button(root, text=\"-\", padx=41, pady=20, command=button_subtract)\n",
    "button_multiply = Button(root, text=\"*\", padx=40, pady=20, command=button_multiply)\n",
    "button_divide = Button(root, text=\"/\", padx=41, pady=20, command=button_divide)\n",
    "\n",
    "# Put the buttons on the screen\n",
    "\n",
    "button_1.grid(row=3, column=0)\n",
    "button_2.grid(row=3, column=1)\n",
    "button_3.grid(row=3, column=2)\n",
    "\n",
    "button_4.grid(row=2, column=0)\n",
    "button_5.grid(row=2, column=1)\n",
    "button_6.grid(row=2, column=2)\n",
    "\n",
    "button_7.grid(row=1, column=0)\n",
    "button_8.grid(row=1, column=1)\n",
    "button_9.grid(row=1, column=2)\n",
    "\n",
    "button_0.grid(row=4, column=0)\n",
    "button_clear.grid(row=4, column=1, columnspan=2)\n",
    "button_add.grid(row=5, column=0)\n",
    "button_equal.grid(row=5, column=1, columnspan=2)\n",
    "\n",
    "button_subtract.grid(row=6, column=0)\n",
    "button_multiply.grid(row=6, column=1)\n",
    "button_divide.grid(row=6, column=2)\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Icons , Images & exit button"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Icons\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "root.title('This is title')\n",
    "root.iconbitmap(\"path_of_icon\") # should be square\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# exit button\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "button_quit = Button(root , text = 'Exit' , command = root.quit)\n",
    "button_quit.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Image\n",
    "\n",
    "from PIL import ImageTk,Image\n",
    "\n",
    "root = Tk()\n",
    "my_img = ImageTk.PhotoImage(Image.open(r\"C:\\Users\\Abhi\\Desktop\\resume icon\\cv1.jpg\"))\n",
    "my_label = Label(image = my_img)\n",
    "my_label.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project - 02\n",
    "\n",
    "## Build an Image Viewer App"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "from PIL import ImageTk,Image\n",
    "\n",
    "root = Tk()\n",
    "root.title('Codemy.com Image Viewer')\n",
    "#root.iconbitmap('c:/gui/codemy.ico')\n",
    "\n",
    "\n",
    "my_img1 = ImageTk.PhotoImage(Image.open(r\"C:\\Users\\Abhi\\Desktop\\resume icon\\AI.jpg\"))\n",
    "my_img2 = ImageTk.PhotoImage(Image.open(r\"C:\\Users\\Abhi\\Desktop\\resume icon\\ai11.jpg\"))\n",
    "my_img3 = ImageTk.PhotoImage(Image.open(r\"C:\\Users\\Abhi\\Desktop\\resume icon\\cv1.jpg\"))\n",
    "my_img4 = ImageTk.PhotoImage(Image.open(r\"C:\\Users\\Abhi\\Desktop\\resume icon\\django.jpg\"))\n",
    "my_img5 = ImageTk.PhotoImage(Image.open(r\"C:\\Users\\Abhi\\Desktop\\resume icon\\deep1.jpg\"))\n",
    "\n",
    "image_list = [my_img1, my_img2, my_img3, my_img4, my_img5]\n",
    "\n",
    "\n",
    "\n",
    "my_label = Label(image=my_img1)\n",
    "my_label.grid(row=0, column=0, columnspan=3)\n",
    "\n",
    "def forward(image_number):\n",
    "    global my_label\n",
    "    global button_forward\n",
    "    global button_back\n",
    "\n",
    "    my_label.grid_forget()   # for next image current image should be forget\n",
    "    my_label = Label(image=image_list[image_number-1])   # for present\n",
    "    button_forward = Button(root, text=\">>\", command=lambda: forward(image_number+1))  # increment for next ready to execute\n",
    "    button_back = Button(root, text=\"<<\", command=lambda: back(image_number-1))  # current back \n",
    "    \n",
    "    if image_number == len(image_list):\n",
    "        button_forward = Button(root, text=\">>\", state=DISABLED)  # at last image button disabled\n",
    "\n",
    "    my_label.grid(row=0, column=0, columnspan=3)  # show present image\n",
    "    button_back.grid(row=1, column=0)             # show present back button\n",
    "    button_forward.grid(row=1, column=2)          # show present forward button\n",
    "\n",
    "def back(image_number):\n",
    "    global my_label\n",
    "    global button_forward\n",
    "    global button_back\n",
    "\n",
    "    my_label.grid_forget()\n",
    "    my_label = Label(image=image_list[image_number-1])\n",
    "    button_forward = Button(root, text=\">>\", command=lambda: forward(image_number+1))\n",
    "    button_back = Button(root, text=\"<<\", command=lambda: back(image_number-1))\n",
    "\n",
    "    if image_number == 1:\n",
    "        button_back = Button(root, text=\"<<\", state=DISABLED)\n",
    "\n",
    "    my_label.grid(row=0, column=0, columnspan=3)\n",
    "    button_back.grid(row=1, column=0)\n",
    "    button_forward.grid(row=1, column=2)\n",
    "\n",
    "\n",
    "\n",
    "button_back = Button(root, text=\"<<\", command=back, state=DISABLED)\n",
    "button_exit = Button(root, text=\"Exit Program\", command=root.quit)\n",
    "button_forward = Button(root, text=\">>\", command=lambda: forward(2))\n",
    "\n",
    "\n",
    "button_back.grid(row=1, column=0)\n",
    "button_exit.grid(row=1, column=1)\n",
    "button_forward.grid(row=1, column=2)\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding Frames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "root = Tk()\n",
    "\n",
    "frame = LabelFrame(root, text = 'This is my frame' , padx=50, pady=50)\n",
    "frame.pack(padx=20, pady=20)\n",
    "\n",
    "b = Button(frame, text=\"Don't Click Here!\")\n",
    "b2 = Button(frame, text=\"...or here!\")\n",
    "b.grid(row=0, column=0)\n",
    "b2.grid(row=1, column=1)\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Radio Buttons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "root = Tk()\n",
    "\n",
    "#r = IntVar()\n",
    "#r.set(\"2\")\n",
    "\n",
    "TOPPINGS = [\n",
    "    (\"Pepperoni\", \"Pepperoni\"),\n",
    "    (\"Cheese\", \"Cheese\"),\n",
    "    (\"Mushroom\", \"Mushroom\"),\n",
    "    (\"Onion\", \"Onion\"),\n",
    "]\n",
    "\n",
    "pizza = StringVar()\n",
    "pizza.set(\"Pepperoni\")\n",
    "\n",
    "for text, topping in TOPPINGS:\n",
    "    Radiobutton(root, text=text, variable=pizza, value=topping).pack(anchor=W)\n",
    "\n",
    "\n",
    "def clicked(value):\n",
    "    myLabel = Label(root, text=value)\n",
    "    myLabel.pack()    \n",
    "\n",
    "#Radiobutton(root, text=\"Option 1\", variable=r, value=1, command=lambda: clicked(r.get())).pack()\n",
    "#Radiobutton(root, text=\"Option 2\", variable=r, value=2, command=lambda: clicked(r.get())).pack()\n",
    "\n",
    "#myLabel = Label(root, text=pizza.get())\n",
    "#myLabel.pack()\n",
    "\n",
    "myButton = Button(root, text=\"Click Me!\", command=lambda: clicked(pizza.get()))\n",
    "myButton.pack()\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Message Box\n",
    "\n",
    "### Types - showinfo, showwarning, showerror, askquestion, askokcancel, askyesno"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import messagebox\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "def popup():\n",
    "    response = messagebox.showinfo(\"This is my Popup!\", \"Hello World!\")   # change showinfo to other types for playing around\n",
    "    Label(root, text=response).pack()\n",
    "\n",
    "Button(root, text=\"Popup\", command=popup).pack()\n",
    "\n",
    "\n",
    "mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Doing some action based on click on message pop\n",
    "\n",
    "from tkinter import messagebox\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "def popup():\n",
    "    response = messagebox.askquestion(\"This is my Popup!\", \"Hello World!\")\n",
    "    Label(root, text=response).pack()  # by this check the label on root and use that label as a condition in if or elif \n",
    "    if response == \"yes\":\n",
    "        Label(root, text=\"You Clicked Yes!\").pack()\n",
    "    else:\n",
    "        Label(root, text=\"You Clicked No!!\").pack()\n",
    "\n",
    "Button(root, text=\"Popup\", command=popup).pack()\n",
    "\n",
    "\n",
    "mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create New Windows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "root = Tk()\n",
    "\n",
    "top = Toplevel()\n",
    "top.title('My Second Window')\n",
    "Label(top, text='Hello World').pack()\n",
    "\n",
    "mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Open Second Window w.r.t root with some action\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "def open():\n",
    "    global my_img\n",
    "    top = Toplevel()\n",
    "    top.title('My Second Window')\n",
    "    my_img = ImageTk.PhotoImage(Image.open(r\"C:\\Users\\Abhi\\Desktop\\resume icon\\AI.jpg\"))\n",
    "    my_label = Label(top, image=my_img).pack()\n",
    "    btn2 = Button(top, text=\"close window\", command=top.destroy).pack()\n",
    "\n",
    "btn = Button(root, text=\"Open Second Windo\", command=open).pack()\n",
    "\n",
    "mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Open Files Dialog Box\n",
    "### Note : Diolog Box only returns the location of the file we can use that location to do as many task."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import ImageTk,Image\n",
    "from tkinter import filedialog\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "root.filename = filedialog.askopenfilename(initialdir=\"path_from_where_should_it_popup\", title=\"Select A File\", filetypes=((\"png files\", \"*.png\"),(\"all files\", \"*.*\")))   # we can can file extentions\n",
    "my_label = Label(root, text=root.filename).pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adding functionality\n",
    "\n",
    "from PIL import ImageTk,Image\n",
    "from tkinter import filedialog\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "root.filename = filedialog.askopenfilename(initialdir=\"path_from_where_should_it_popup\", title=\"Select A File\", filetypes=((\"png files\", \"*.png\"),(\"all files\", \"*.*\")))   # we can can file extentions\n",
    "my_label = Label(root, text=root.filename).pack()\n",
    "my_image = ImageTk.PhotoImage(Image.open(root.filename))\n",
    "my_image_label = Label(image=my_image).pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adding funtionality\n",
    "\n",
    "from PIL import ImageTk,Image\n",
    "from tkinter import filedialog\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "\n",
    "def open():\n",
    "    global my_image\n",
    "    root.filename = filedialog.askopenfilename(initialdir=\"path_from_where_should_it_popup\", title=\"Select A File\", filetypes=((\"png files\", \"*.png\"),(\"all files\", \"*.*\")))   # we can can file extentions\n",
    "    my_label = Label(root, text=root.filename).pack()\n",
    "    my_image = ImageTk.PhotoImage(Image.open(root.filename))\n",
    "    my_image_label = Label(image=my_image).pack()\n",
    "\n",
    "\n",
    "my_btn = Button(root, text=\"Open File\", command=open).pack()\n",
    "\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Geometry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "root = Tk()\n",
    "\n",
    "root.geometry(\"400x400\")\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sliders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "root = Tk()\n",
    "\n",
    "vertical = Scale(root, from_=0, to=200)\n",
    "vertical.pack()   # note here the pack should be in new line\n",
    "\n",
    "\n",
    "horizontal = Scale(root, from_=0, to=400, orient=HORIZONTAL)\n",
    "horizontal.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Checkboxes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import ImageTk,Image\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "var = StringVar()\n",
    "\n",
    "c =Checkbutton(root, text=\"Would you like to SuperSize your order? Check Here!\", variable=var, onvalue=\"ON\", offvalue=\"OFF\")\n",
    "c.deselect()\n",
    "c.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adding functionality\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "def show():   # note\n",
    "    myLabel = Label(root, text=var.get()).pack()\n",
    "\n",
    "var = StringVar()\n",
    "\n",
    "c =Checkbutton(root, text=\"Would you like to SuperSize your order? Check Here!\", variable=var, onvalue=\"SuperSize\", offvalue=\"RegularSize\")\n",
    "c.deselect()\n",
    "c.pack()\n",
    "\n",
    "mybutton = Button(root,text = 'My Selection' , command = show).pack()   # note\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Drop Down Boxes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "root = Tk()\n",
    "\n",
    "options = [\n",
    "     \"Monday\", \n",
    "     \"Tuesday\", \n",
    "     \"Wednesday\", \n",
    "     \"Thursday\", \n",
    "     \"Friday\",\n",
    "     \"Saturday\"\n",
    "]     \n",
    "\n",
    "clicked = StringVar()   # because options is in string\n",
    "clicked.set(options[0])\n",
    "\n",
    "drop = OptionMenu(root, clicked, *options)\n",
    "drop.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adding functionality\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "def show():\n",
    "     myLabel = Label(root, text=clicked.get()).pack()\n",
    "\n",
    "options = [\n",
    "     \"Monday\", \n",
    "     \"Tuesday\", \n",
    "     \"Wednesday\", \n",
    "     \"Thursday\", \n",
    "     \"Friday\",\n",
    "     \"Saturday\"\n",
    "]     \n",
    "\n",
    "clicked = StringVar()\n",
    "clicked.set(options[0])\n",
    "\n",
    "drop = OptionMenu(root, clicked, *options)\n",
    "drop.pack()\n",
    "\n",
    "myButton = Button(root, text=\"Show Selection\", command=show).pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adding functionality\n",
    "\n",
    "from tkinter import ttk\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "def clicking(event):\n",
    "     myLabel = Label(root, text=droped.get()).pack()\n",
    "\n",
    "def clicker(event):\n",
    "     myLabel = Label(root, text=clicked.get()).pack()\n",
    "\n",
    "def show():\n",
    "     myLabel = Label(root, text=clicked.get()).pack()\n",
    "\n",
    "options = [\n",
    "     \"Monday\", \n",
    "     \"Tuesday\", \n",
    "     \"Wednesday\", \n",
    "     \"Thursday\", \n",
    "     \"Friday\",\n",
    "     \"Saturday\"\n",
    "]     \n",
    "\n",
    "clicked = StringVar()\n",
    "clicked.set(options[0])\n",
    "\n",
    "drop = OptionMenu(root, clicked, *options, command=clicker)\n",
    "\n",
    "drop.pack()\n",
    "\n",
    "droped = ttk.Combobox(root, value=[\"Search by...\", \"Last Name\", \"Email Address\", \"Customer ID\"])\n",
    "droped.current(0)\n",
    "droped.bind(\"<<ComboboxSelected>>\", clicking)\n",
    "droped.pack()\n",
    "     \n",
    "\n",
    "\n",
    "#myButton = Button(root, text=\"Show Selection\", command=show).pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using Databases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sqlite3\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "# Databases\n",
    "\n",
    "# Create a database or connect to one\n",
    "conn = sqlite3.connect('address_book.db')\n",
    "\n",
    "# Create cursor\n",
    "c = conn.cursor()\n",
    "\n",
    "# Create table\n",
    "\n",
    "c.execute(\"\"\"CREATE TABLE addresses (\n",
    "first_name text,\n",
    "last_name text,\n",
    "address text,\n",
    "city text,\n",
    "state text,\n",
    "zipcode integer\n",
    ")\"\"\")\n",
    "\n",
    "\n",
    "#Commit Changes\n",
    "conn.commit()\n",
    "\n",
    "# Close Connection \n",
    "conn.close()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project - 03\n",
    "## Building Out The GUI for our Database App"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "from PIL import ImageTk,Image\n",
    "import sqlite3\n",
    "\n",
    "\n",
    "root = Tk()\n",
    "root.geometry(\"400x600\")\n",
    "\n",
    "# Databases\n",
    "\n",
    "# Create a database or connect to one\n",
    "conn = sqlite3.connect('address_book.db')\n",
    "\n",
    "# Create cursor\n",
    "c = conn.cursor()\n",
    "\n",
    "# Create table\n",
    "'''\n",
    "c.execute(\"\"\"CREATE TABLE addresses (\n",
    "        first_name text,\n",
    "        last_name text,\n",
    "        address text,\n",
    "        city text,\n",
    "        state text,\n",
    "        zipcode integer\n",
    "        )\"\"\")\n",
    "'''\n",
    "# Create Update function to update a record\n",
    "def update():\n",
    "    # Create a database or connect to one\n",
    "    conn = sqlite3.connect('address_book.db')\n",
    "    # Create cursor\n",
    "    c = conn.cursor()\n",
    "\n",
    "    record_id = delete_box.get()\n",
    "\n",
    "    c.execute(\"\"\"UPDATE addresses SET\n",
    "        first_name = :first,\n",
    "        last_name = :last,\n",
    "        address = :address,\n",
    "        city = :city,\n",
    "        state = :state,\n",
    "        zipcode = :zipcode \n",
    "\n",
    "        WHERE oid = :oid\"\"\",\n",
    "        {\n",
    "        'first': f_name_editor.get(),\n",
    "        'last': l_name_editor.get(),\n",
    "        'address': address_editor.get(),\n",
    "        'city': city_editor.get(),\n",
    "        'state': state_editor.get(),\n",
    "        'zipcode': zipcode_editor.get(),\n",
    "        'oid': record_id\n",
    "        })\n",
    "\n",
    "\n",
    "    #Commit Changes\n",
    "    conn.commit()\n",
    "\n",
    "    # Close Connection \n",
    "    conn.close()\n",
    "\n",
    "    editor.destroy()\n",
    "    root.deiconify()\n",
    "\n",
    "# Create Edit function to update a record\n",
    "def edit():\n",
    "    root.withdraw()\n",
    "    global editor\n",
    "    editor = Tk()\n",
    "    editor.title('Update A Record')\n",
    "    editor.geometry(\"400x300\")\n",
    "    # Create a database or connect to one\n",
    "    conn = sqlite3.connect('address_book.db')\n",
    "    # Create cursor\n",
    "    c = conn.cursor()\n",
    "\n",
    "    record_id = delete_box.get()\n",
    "    # Query the database\n",
    "    c.execute(\"SELECT * FROM addresses WHERE oid = \" + record_id)\n",
    "    records = c.fetchall()\n",
    "    \n",
    "    #Create Global Variables for text box names\n",
    "    global f_name_editor\n",
    "    global l_name_editor\n",
    "    global address_editor\n",
    "    global city_editor\n",
    "    global state_editor\n",
    "    global zipcode_editor\n",
    "\n",
    "    # Create Text Boxes\n",
    "    f_name_editor = Entry(editor, width=30)\n",
    "    f_name_editor.grid(row=0, column=1, padx=20, pady=(10, 0))\n",
    "    l_name_editor = Entry(editor, width=30)\n",
    "    l_name_editor.grid(row=1, column=1)\n",
    "    address_editor = Entry(editor, width=30)\n",
    "    address_editor.grid(row=2, column=1)\n",
    "    city_editor = Entry(editor, width=30)\n",
    "    city_editor.grid(row=3, column=1)\n",
    "    state_editor = Entry(editor, width=30)\n",
    "    state_editor.grid(row=4, column=1)\n",
    "    zipcode_editor = Entry(editor, width=30)\n",
    "    zipcode_editor.grid(row=5, column=1)\n",
    "    \n",
    "    # Create Text Box Labels\n",
    "    f_name_label = Label(editor, text=\"First Name\")\n",
    "    f_name_label.grid(row=0, column=0, pady=(10, 0))\n",
    "    l_name_label = Label(editor, text=\"Last Name\")\n",
    "    l_name_label.grid(row=1, column=0)\n",
    "    address_label = Label(editor, text=\"Address\")\n",
    "    address_label.grid(row=2, column=0)\n",
    "    city_label = Label(editor, text=\"City\")\n",
    "    city_label.grid(row=3, column=0)\n",
    "    state_label = Label(editor, text=\"State\")\n",
    "    state_label.grid(row=4, column=0)\n",
    "    zipcode_label = Label(editor, text=\"Zipcode\")\n",
    "    zipcode_label.grid(row=5, column=0)\n",
    "\n",
    "    # Loop thru results\n",
    "    for record in records:\n",
    "        f_name_editor.insert(0, record[0])\n",
    "        l_name_editor.insert(0, record[1])\n",
    "        address_editor.insert(0, record[2])\n",
    "        city_editor.insert(0, record[3])\n",
    "        state_editor.insert(0, record[4])\n",
    "        zipcode_editor.insert(0, record[5])\n",
    "\n",
    "    \n",
    "    # Create a Save Button To Save edited record\n",
    "    edit_btn = Button(editor, text=\"Save Record\", command=update)\n",
    "    edit_btn.grid(row=6, column=0, columnspan=2, pady=10, padx=10, ipadx=145)\n",
    "\n",
    "    \n",
    "\n",
    "\n",
    "# Create Function to Delete A Record\n",
    "def delete():\n",
    "    # Create a database or connect to one\n",
    "    conn = sqlite3.connect('address_book.db')\n",
    "    # Create cursor\n",
    "    c = conn.cursor()\n",
    "\n",
    "    # Delete a record\n",
    "    c.execute(\"DELETE from addresses WHERE oid = \" + delete_box.get())\n",
    "\n",
    "    delete_box.delete(0, END)\n",
    "\n",
    "    #Commit Changes\n",
    "    conn.commit()\n",
    "\n",
    "    # Close Connection \n",
    "    conn.close()\n",
    "\n",
    "\n",
    "\n",
    "# Create Submit Function For database\n",
    "def submit():\n",
    "    # Create a database or connect to one\n",
    "    conn = sqlite3.connect('address_book.db')\n",
    "    # Create cursor\n",
    "    c = conn.cursor()\n",
    "\n",
    "    # Insert Into Table\n",
    "    c.execute(\"INSERT INTO addresses VALUES (:f_name, :l_name, :address, :city, :state, :zipcode)\",\n",
    "            {\n",
    "                'f_name': f_name.get(),\n",
    "                'l_name': l_name.get(),\n",
    "                'address': address.get(),\n",
    "                'city': city.get(),\n",
    "                'state': state.get(),\n",
    "                'zipcode': zipcode.get()\n",
    "            })\n",
    "\n",
    "\n",
    "    #Commit Changes\n",
    "    conn.commit()\n",
    "\n",
    "    # Close Connection \n",
    "    conn.close()\n",
    "\n",
    "    # Clear The Text Boxes\n",
    "    f_name.delete(0, END)\n",
    "    l_name.delete(0, END)\n",
    "    address.delete(0, END)\n",
    "    city.delete(0, END)\n",
    "    state.delete(0, END)\n",
    "    zipcode.delete(0, END)\n",
    "\n",
    "# Create Query Function\n",
    "def query():\n",
    "    # Create a database or connect to one\n",
    "    conn = sqlite3.connect('address_book.db')\n",
    "    # Create cursor\n",
    "    c = conn.cursor()\n",
    "\n",
    "    # Query the database\n",
    "    c.execute(\"SELECT *, oid FROM addresses\")\n",
    "    records = c.fetchall()\n",
    "    # print(records)\n",
    "\n",
    "    # Loop Thru Results\n",
    "    print_records = ''\n",
    "    for record in records:\n",
    "        print_records += str(record[0]) + \" \" + str(record[1]) + \" \" + \"\\t\" +str(record[6]) + \"\\n\"\n",
    "\n",
    "    query_label = Label(root, text=print_records)\n",
    "    query_label.grid(row=12, column=0, columnspan=2)\n",
    "\n",
    "    #Commit Changes\n",
    "    conn.commit()\n",
    "\n",
    "    # Close Connection \n",
    "    conn.close()\n",
    "\n",
    "\n",
    "# Create Text Boxes\n",
    "f_name = Entry(root, width=30)\n",
    "f_name.grid(row=0, column=1, padx=20, pady=(10, 0))\n",
    "l_name = Entry(root, width=30)\n",
    "l_name.grid(row=1, column=1)\n",
    "address = Entry(root, width=30)\n",
    "address.grid(row=2, column=1)\n",
    "city = Entry(root, width=30)\n",
    "city.grid(row=3, column=1)\n",
    "state = Entry(root, width=30)\n",
    "state.grid(row=4, column=1)\n",
    "zipcode = Entry(root, width=30)\n",
    "zipcode.grid(row=5, column=1)\n",
    "delete_box = Entry(root, width=30)\n",
    "delete_box.grid(row=9, column=1, pady=5)\n",
    "\n",
    "\n",
    "# Create Text Box Labels\n",
    "f_name_label = Label(root, text=\"First Name\")\n",
    "f_name_label.grid(row=0, column=0, pady=(10, 0))\n",
    "l_name_label = Label(root, text=\"Last Name\")\n",
    "l_name_label.grid(row=1, column=0)\n",
    "address_label = Label(root, text=\"Address\")\n",
    "address_label.grid(row=2, column=0)\n",
    "city_label = Label(root, text=\"City\")\n",
    "city_label.grid(row=3, column=0)\n",
    "state_label = Label(root, text=\"State\")\n",
    "state_label.grid(row=4, column=0)\n",
    "zipcode_label = Label(root, text=\"Zipcode\")\n",
    "zipcode_label.grid(row=5, column=0)\n",
    "delete_box_label = Label(root, text=\"Select ID\")\n",
    "delete_box_label.grid(row=9, column=0, pady=5)\n",
    "\n",
    "# Create Submit Button\n",
    "submit_btn = Button(root, text=\"Add Record To Database\", command=submit)\n",
    "submit_btn.grid(row=6, column=0, columnspan=2, pady=10, padx=10, ipadx=100)\n",
    "\n",
    "# Create a Query Button\n",
    "query_btn = Button(root, text=\"Show Records\", command=query)\n",
    "query_btn.grid(row=7, column=0, columnspan=2, pady=10, padx=10, ipadx=137)\n",
    "\n",
    "#Create A Delete Button\n",
    "delete_btn = Button(root, text=\"Delete Record\", command=delete)\n",
    "delete_btn.grid(row=10, column=0, columnspan=2, pady=10, padx=10, ipadx=136)\n",
    "\n",
    "# Create an Update Button\n",
    "edit_btn = Button(root, text=\"Edit Record\", command=edit)\n",
    "edit_btn.grid(row=11, column=0, columnspan=2, pady=10, padx=10, ipadx=143)\n",
    "\n",
    "\n",
    "#Commit Changes\n",
    "conn.commit()\n",
    "\n",
    "# Close Connection \n",
    "conn.close()\n",
    "\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project - 04\n",
    "## Building a Weather App\n",
    "\n",
    "### Note - Don't try to use my API Key because i have deleted it get your own from ( http://docs.airnowapi.org/ )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "from PIL import ImageTk,Image\n",
    "import requests\n",
    "import json\n",
    "\n",
    "\n",
    "root = Tk()\n",
    "root.geometry(\"600x100\")\n",
    "\n",
    "#Create Zipcode Lookup Function\n",
    "def zipLookup():\n",
    "    #zip.get()\n",
    "    #zipLabel = Label(root, text=zip.get())\n",
    "    #zipLabel.grid(row=1, column=0, columnspan=2)\n",
    "\n",
    "    try:\n",
    "        api_request = requests.get(\"http://www.airnowapi.org/aq/observation/zipCode/current/?format=application/json&zipCode=\" + zip.get() + \"&distance=5&API_KEY=96A38DFD-5C56-4740-AD99-E38C0C855A1B\")\n",
    "        api = json.loads(api_request.content)\n",
    "        city = api[0]['ReportingArea']\n",
    "        quality = api[0]['AQI']\n",
    "        category = api[0]['Category']['Name']\n",
    "\n",
    "        if category == \"Good\":\n",
    "            weather_color = \"#0C0\"\n",
    "        elif category == \"Moderate\":\n",
    "            weather_color = \"#FFFF00\"\n",
    "        elif category == \"Unhealthy for Sensitive Groups\":\n",
    "            weather_color = \"#ff9900\"\n",
    "        elif category == \"Unhealthy\":\n",
    "            weather_color = \"#FF0000\"\n",
    "        elif category == \"Very Unhealthy\":\n",
    "            weather_color = \"#990066\"\n",
    "        elif category == \"Hazardous\":\n",
    "            weather_color = \"#660000\"\n",
    "\n",
    "\n",
    "        root.configure(background=weather_color)\n",
    "        \n",
    "        myLabel = Label(root, text=city + \" Air Quality \" + str(quality) + \" \" + category, font=(\"Helvetica\", 20), background=weather_color) \n",
    "        myLabel.grid(row=1, column=0, columnspan=2)\n",
    "    except Exception as e:    \n",
    "        api = \"Error...\"\n",
    "\n",
    "zip = Entry(root)\n",
    "zip.grid(row=0, column=0, sticky=W+E+N+S)\n",
    "\n",
    "zipButton = Button(root, text=\"Lookup Zipcode\", command=zipLookup)\n",
    "zipButton.grid(row=0, column=1, sticky=W+E+N+S)\n",
    "\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "from PIL import ImageTk,Image\n",
    "\n",
    "root = Tk()\n",
    "root.geometry(\"600x100\")\n",
    "\n",
    "def zipLookup():\n",
    "    import requests\n",
    "    import json    \n",
    "    try:\n",
    "        api_request = requests.get(\"http://www.airnowapi.org/aq/observation/zipCode/current/?format=application/json&zipCode=\" + zip.get() + \"&distance=5&API_KEY=96A38DFD-5C56-4740-AD99-E38C0C855A1B\")\n",
    "        api = json.loads(api_request.content)\n",
    "        city = api[0]['ReportingArea']\n",
    "        quality = api[0]['AQI']\n",
    "        category = api[0]['Category']['Name']\n",
    "\n",
    "        if category == \"Good\":\n",
    "            weather_color = \"#0C0\"\n",
    "        elif category == \"Moderate\":\n",
    "            weather_color = \"#FFFF00\"\n",
    "        elif category == \"Unhealthy for Sensitive Groups\":\n",
    "            weather_color = \"#ff9900\"\n",
    "        elif category == \"Unhealthy\":\n",
    "            weather_color = \"#FF0000\"\n",
    "        elif category == \"Very Unhealthy\":\n",
    "            weather_color = \"#990066\"\n",
    "        elif category == \"Hazardous\":\n",
    "            weather_color = \"#660000\"\n",
    "\n",
    "        root.configure(background=weather_color)\n",
    "        myLabel = Label(root, text=city + \" Air Quality \" + str(quality) + \" \" + category, font=(\"Helvetica\", 20), background=weather_color) \n",
    "        myLabel.pack()\n",
    "\n",
    "    except Exception as e:    \n",
    "        api = \"Error...\"\n",
    "\n",
    "    \n",
    "\n",
    "# http://www.airnowapi.org/aq/observation/zipCode/current/?format=application/json&zipCode=89129&distance=5&API_KEY=96A38DFD-5C56-4740-AD99-E38C0C855A1B\n",
    "lookup_frame = LabelFrame(root, text=\"Look Up Air Quality\", padx=5, pady=5)\n",
    "lookup_frame.pack(padx=10, pady=10)\n",
    "\n",
    "zip = Entry(lookup_frame)\n",
    "zip.pack()\n",
    "\n",
    "submitButton = Button(lookup_frame, text=\"Lookup\", command=zipLookup)\n",
    "submitButton.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Charts and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tkinter import *\n",
    "from PIL import ImageTk,Image\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "root = Tk()\n",
    "root.geometry(\"400x200\")\n",
    "\n",
    "def graph():\n",
    "    house_prices = np.random.normal(200000, 25000, 5000)\n",
    "    plt.hist(house_prices)\n",
    "    plt.show()\n",
    "\n",
    "my_button = Button(root, text=\"Graph It!\", command=graph)\n",
    "my_button.pack()\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:matplotlib.legend:No handles with labels found to put in legend.\n"
     ]
    }
   ],
   "source": [
    "import tkinter as tk\n",
    "from pandas import DataFrame\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n",
    "\n",
    "Data1 = {'Country': ['US','CA','GER','UK','FR'],\n",
    "        'GDP_Per_Capita': [45000,42000,52000,49000,47000]\n",
    "       }\n",
    "\n",
    "df1 = DataFrame(Data1, columns= ['Country', 'GDP_Per_Capita'])\n",
    "df1 = df1[['Country', 'GDP_Per_Capita']].groupby('Country').sum()\n",
    "\n",
    "\n",
    "\n",
    "Data2 = {'Year': [1920,1930,1940,1950,1960,1970,1980,1990,2000,2010],\n",
    "        'Unemployment_Rate': [9.8,12,8,7.2,6.9,7,6.5,6.2,5.5,6.3]\n",
    "       }\n",
    "  \n",
    "df2 = DataFrame(Data2,columns=['Year','Unemployment_Rate'])\n",
    "df2 = df2[['Year', 'Unemployment_Rate']].groupby('Year').sum()\n",
    "\n",
    "\n",
    "\n",
    "Data3 = {'Interest_Rate': [5,5.5,6,5.5,5.25,6.5,7,8,7.5,8.5],\n",
    "        'Stock_Index_Price': [1500,1520,1525,1523,1515,1540,1545,1560,1555,1565]\n",
    "       }\n",
    "  \n",
    "df3 = DataFrame(Data3,columns=['Interest_Rate','Stock_Index_Price'])\n",
    " \n",
    "root= tk.Tk() \n",
    "  \n",
    "\n",
    "figure1 = plt.Figure(figsize=(6,5), dpi=100)\n",
    "ax1 = figure1.add_subplot(111)\n",
    "bar1 = FigureCanvasTkAgg(figure1, root)\n",
    "bar1.get_tk_widget().pack(side=tk.LEFT, fill=tk.BOTH)\n",
    "df1.plot(kind='bar', legend=True, ax=ax1)\n",
    "ax1.set_title('Country Vs. GDP Per Capita')\n",
    "\n",
    "\n",
    "figure2 = plt.Figure(figsize=(5,4), dpi=100)\n",
    "ax2 = figure2.add_subplot(111)\n",
    "line2 = FigureCanvasTkAgg(figure2, root)\n",
    "line2.get_tk_widget().pack(side=tk.LEFT, fill=tk.BOTH)\n",
    "df2.plot(kind='line', legend=True, ax=ax2, color='r',marker='o', fontsize=10)\n",
    "ax2.set_title('Year Vs. Unemployment Rate')\n",
    "\n",
    "\n",
    "figure3 = plt.Figure(figsize=(5,4), dpi=100)\n",
    "ax3 = figure3.add_subplot(111)\n",
    "ax3.scatter(df3['Interest_Rate'],df3['Stock_Index_Price'], color = 'g')\n",
    "scatter3 = FigureCanvasTkAgg(figure3, root) \n",
    "scatter3.get_tk_widget().pack(side=tk.LEFT, fill=tk.BOTH)\n",
    "ax3.legend() \n",
    "ax3.set_xlabel('Interest Rate')\n",
    "ax3.set_title('Interest Rate Vs. Stock Index Price')\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ...END..."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
